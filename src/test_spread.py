from pprint import pprint

from pytest_bdd import scenario, given, when, then, parsers

from beancount.core import data
from beancount.core.compare import hash_entry, includes_entries, compare_entries
from beancount.loader import load_string
from beancount.parser import printer

from spread import spread

@scenario('spread.feature', 'Spread income from paycheque over pay period')
def test_spread_paycheque():
    pass

@scenario('spread.feature', 'Spread utility bill expenses over billing period')
def test_spread_utilitybill():
    pass

@given(parsers.parse('the following beancount income transaction:\n{original_txn_text}'))
@given(parsers.parse('the following beancount expense transaction:\n{original_txn_text}'))
def entry_stream(original_txn_text):
    entries, _, _ = load_string(original_txn_text)
    # TODO check if errors, options, etc are ok.
    return entries

@when('the beancount-spread plugin is executed')
def spread_txn(entry_stream):
    entry_stream[:], _ = spread(entry_stream, {})

@then(parsers.parse('the original income transaction should be modified:\n{correctly_modified_txn_text}'))
@then(parsers.parse('the original expense transaction should be modified:\n{correctly_modified_txn_text}'))
def original_txn_modified(entry_stream, correctly_modified_txn_text):
    # Get correctly modified transaction from gherkin file
    entries, errors, _ = load_string(correctly_modified_txn_text)
    correctly_modified_txn = entries[0]

    # Get modified transaction from output of plugin
    modified_txn = entry_stream.pop(0)

    printer.print_entry(modified_txn)
    printer.print_entry(correctly_modified_txn)
    assert hash_entry(modified_txn) == hash_entry(correctly_modified_txn)

@then(parsers.parse('the following income transactions should be generated:\n{correctly_generated_txns_text}'))
@then(parsers.parse('the following expense transactions should be generated:\n{correctly_generated_txns_text}'))
def generated_txns(entry_stream, correctly_generated_txns_text):
    # Get correctly generated transactions from gherkin file
    correctly_generated_txns, _, _ = load_string(correctly_generated_txns_text)

    # Get generated transactions from output of plugin
    # (Original modified transaction was removed from stream during 'when' step)
    generated_txns = entry_stream

    printer.print_entries(entry_stream)
    has_correct, missing_entries = includes_entries(correctly_generated_txns, generated_txns)
    assert has_correct

    # Only 4 or the correct entries are written in feature file for the sake of brevity
    # Make sure that there are the right number generated by the plugin
    assert len(generated_txns) == 30
